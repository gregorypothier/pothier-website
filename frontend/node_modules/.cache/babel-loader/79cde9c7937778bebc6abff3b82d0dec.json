{"ast":null,"code":"var _jsxFileName = \"/home/bob/code/gpothier/frontend/src/containers/Tweets/Tweets.jsx\";\nimport React, { Component } from \"react\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport { List, Header, Pagination } from \"semantic-ui-react\"; //import Truncate from \"react-truncate\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"./Tweet.css\";\n\nclass Feeds extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      newsIndex: 0,\n      items: Array.from({\n        length: 20\n      }),\n      hasMore: true\n    };\n\n    this.fetchMoreData = () => {\n      if (this.state.items.length >= 500) {\n        this.setState({\n          hasMore: false\n        });\n        return;\n      } // a fake async api call like which sends\n      // 20 more records in .5 secs\n\n\n      setTimeout(() => {\n        this.setState({\n          items: this.state.items.concat(Array.from({\n            length: 20\n          }))\n        });\n      }, 500);\n    };\n  }\n\n  favicon(icon) {\n    if (icon !== undefined && icon !== \"\") {\n      const temp = icon;\n\n      const images = require.context(\"../../assets/icons\", true);\n\n      const defImage = images(\"./\" + temp + \".ico\");\n      const image = React.createElement(\"img\", {\n        src: defImage,\n        alt: defImage,\n        className: \"tab-icons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      });\n      return image;\n    }\n  }\n\n  render() {\n    var data = this.props.data.news;\n    console.log(data); // return list of tab titles to populate the tab panel\n\n    const title = Object.entries(data).map((item, key) => {\n      if (item[1].name === this.props.name) {\n        // console.log(item[1]);\n        return Object.entries(item[1].data).map((titleName, v) => {\n          // console.log(titleName[1].name);\n          let titleNameFormatted = titleName[1].name.split(/(\\s+)/).map(j => React.createElement(\"div\", {\n            key: j,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 49\n            },\n            __self: this\n          }, React.createElement(\"b\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 50\n            },\n            __self: this\n          }, j)));\n          return React.createElement(Tab, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            title: titleName[1].title,\n            className: \"tab-headers\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55\n            },\n            __self: this\n          }, this.favicon(`${titleName[1].ico}`), React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57\n            },\n            __self: this\n          }, titleNameFormatted)));\n        });\n      }\n    }); // map throught state, if index selected matches then render that list of items\n\n    const text = Object.entries(this.props.data.news).map((item, key) => {\n      if (item[1].name === this.props.name) {\n        return React.createElement(\"div\", {\n          key: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, React.createElement(List, {\n          selection: true,\n          divided: true,\n          relaxed: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, Object.entries(item[1].data).map((SelectedTabIndex, v) => {\n          // this is where we match array to pull that matches the tab clicked (set in state)\n          if (Number(SelectedTabIndex[0]) === this.state.newsIndex) {\n            // this is where we map across the titles array for the item selected\n            return Object.entries(SelectedTabIndex[1].data).slice().map((sourceData, b) => {\n              console.log(SelectedTabIndex[1].data);\n              return React.createElement(List.Item, {\n                key: sourceData[1].id,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 81\n                },\n                __self: this\n              }, React.createElement(\"a\", {\n                href: sourceData[1].link,\n                target: \"_blank\",\n                rel: \"noopener noreferrer\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 82\n                },\n                __self: this\n              }, React.createElement(\"div\", {\n                className: \"feed-title\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 87\n                },\n                __self: this\n              }, sourceData[1].title)));\n            });\n          }\n        })));\n      }\n    }); //return the feeds populated with title tabs and feed content\n\n    let feeds = React.createElement(Tabs, {\n      selectedIndex: this.state.newsIndex,\n      onSelect: newsIndex => this.setState({\n        newsIndex\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(TabList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"tab-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, this.props.name)), title)), React.createElement(InfiniteScroll, {\n      dataLength: this.state.items.length,\n      next: this.fetchMoreData,\n      hasMore: this.state.hasMore,\n      loader: React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Loading...\"),\n      height: 400,\n      endMessage: React.createElement(\"p\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Yay! You have seen it all\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \" \", text)));\n    return feeds;\n  }\n\n}\n\nexport default Feeds;","map":{"version":3,"sources":["/home/bob/code/gpothier/frontend/src/containers/Tweets/Tweets.jsx"],"names":["React","Component","Tab","Tabs","TabList","TabPanel","List","Header","Pagination","InfiniteScroll","Feeds","state","newsIndex","items","Array","from","length","hasMore","fetchMoreData","setState","setTimeout","concat","favicon","icon","undefined","temp","images","require","context","defImage","image","render","data","props","news","console","log","title","Object","entries","map","item","key","name","titleName","v","titleNameFormatted","split","j","ico","text","SelectedTabIndex","Number","slice","sourceData","b","id","link","feeds","textAlign"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport { List, Header, Pagination } from \"semantic-ui-react\";\n//import Truncate from \"react-truncate\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"./Tweet.css\";\n\nclass Feeds extends React.Component {\n  state = {\n    newsIndex: 0,\n    items: Array.from({ length: 20 }),\n    hasMore: true\n  }\n\n  fetchMoreData = () => {\n    if (this.state.items.length >= 500) {\n      this.setState({ hasMore: false });\n      return;\n    }\n    // a fake async api call like which sends\n    // 20 more records in .5 secs\n    setTimeout(() => {\n      this.setState({\n        items: this.state.items.concat(Array.from({ length: 20 }))\n      });\n    }, 500);\n  };\n\n  favicon(icon) {\n    if (icon !== undefined && icon !== \"\") {\n      const temp = icon;\n      const images = require.context(\"../../assets/icons\", true);\n      const defImage = images(\"./\" + temp + \".ico\");\n      const image = <img src={defImage} alt={defImage} className=\"tab-icons\" />;\n      return image;\n    }\n  }\n\n  render() {\n    var data = this.props.data.news;\n    console.log(data);\n    // return list of tab titles to populate the tab panel\n    const title = Object.entries(data).map((item, key) => {\n      if (item[1].name === this.props.name) {\n        // console.log(item[1]);\n        return Object.entries(item[1].data).map((titleName, v) => {\n          // console.log(titleName[1].name);\n          let titleNameFormatted = titleName[1].name.split(/(\\s+)/).map(j => (\n            <div key={j}>\n              <b>{j}</b>\n            </div>\n          ));\n          return (\n            <Tab>\n              <div title={titleName[1].title} className=\"tab-headers\">\n                {this.favicon(`${titleName[1].ico}`)}\n                <div>{titleNameFormatted}</div>\n              </div>\n            </Tab>\n          );\n        });\n      }\n    });\n\n    // map throught state, if index selected matches then render that list of items\n    const text = Object.entries(this.props.data.news).map((item, key) => {\n      \n      if (item[1].name === this.props.name) {\n        return (\n          <div key={key}>\n            <List selection divided relaxed>\n              {Object.entries(item[1].data).map((SelectedTabIndex, v) => {\n                // this is where we match array to pull that matches the tab clicked (set in state)\n                if (Number(SelectedTabIndex[0]) === this.state.newsIndex) {\n                  // this is where we map across the titles array for the item selected\n                  return Object.entries(SelectedTabIndex[1].data)\n                    .slice()\n                    .map((sourceData, b) => {\n                      console.log(SelectedTabIndex[1].data)\n                      return (\n                        <List.Item key={sourceData[1].id}>\n                          <a\n                            href={sourceData[1].link}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                          >\n                            <div className=\"feed-title\">\n                              {sourceData[1].title}\n                            </div>\n                          </a>\n                        </List.Item>\n                      );\n                    });\n                }\n              })}\n            </List>\n          </div>\n        );\n      }\n    });\n\n    //return the feeds populated with title tabs and feed content\n    let feeds = (\n      <Tabs\n        selectedIndex={this.state.newsIndex}\n        onSelect={newsIndex => this.setState({ newsIndex })}\n      >\n        <TabList>\n          <div>\n            <b>\n              <span className=\"tab-title\">{this.props.name}</span>\n            </b>\n            {title}\n          </div>\n        </TabList>\n        <InfiniteScroll\n          dataLength={this.state.items.length}\n          next={this.fetchMoreData}\n          hasMore={this.state.hasMore}\n          loader={<h4>Loading...</h4>}\n          height={400}\n          endMessage={\n            <p style={{ textAlign: \"center\" }}>\n              <b>Yay! You have seen it all</b>\n            </p>\n          }\n        >\n          <div> {text}</div>\n        </InfiniteScroll>\n      </Tabs>\n    );\n\n    return feeds;\n  }\n}\n\nexport default Feeds;\n"]},"metadata":{},"sourceType":"module"}