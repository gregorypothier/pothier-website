{"ast":null,"code":"var _jsxFileName = \"/home/bob/code/gpothier/frontend/src/components/Weather/Weather.jsx\";\nimport React from \"react\";\nimport { Header, Grid, Image, Dimmer, Loader } from \"semantic-ui-react\";\nimport \"./Weather.css\";\n\nconst Weather = props => {\n  {\n    /* If props data is empty/null, return a loading spinner */\n  }\n\n  if (props.data.news[7].data.length === 0) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, React.createElement(Dimmer, {\n      active: true,\n      inverted: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      active: true,\n      inline: \"centered\",\n      size: \"mini\",\n      inverted: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    })));\n  }\n\n  {\n    /* Set the weather variables to be used */\n  }\n  var data = props.data.news[7].data[0].data[0];\n  const city_name = data[\"city_name\"];\n  let temp = data[\"temp\"];\n  let wicon = data[\"ico\"];\n  let day = data[\"day\"];\n  const forecast = props.data.news[6].data[0].data;\n  let f = [];\n  let count = 0;\n  {\n    /* Map over forecast data and save to f array */\n  }\n  Object.entries(forecast).map((item, key) => {\n    f[count] = {\n      day: item[1].day,\n      temp: item[1].temp,\n      wicon: item[1].ico\n    };\n    count++;\n    return f;\n  });\n  {\n    /* Set up the weather icons to use */\n  }\n\n  const weathericon = icon => {\n    if (icon !== undefined && icon !== \"\") {\n      const temp = icon;\n\n      const images = require.context(\"../../assets/icons\", true);\n\n      const weatherimage = images(\"./\" + temp + \".svg\");\n      const image = React.createElement(Image, {\n        src: weatherimage,\n        alt: \"Current Conditions\",\n        size: \"tiny\",\n        centered: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      });\n      return image;\n    }\n  };\n\n  return React.createElement(Grid, {\n    centered: true,\n    columns: 1,\n    style: {\n      background: \"WhiteSmoke\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Grid.Row, {\n    centered: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    textAlign: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(Header, {\n    size: \"small\",\n    style: {\n      margin: \"0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, city_name), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, day)), React.createElement(Grid.Column, {\n    textAlign: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, weathericon(wicon)), React.createElement(\"div\", {\n    className: \"weather-icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, temp))), React.createElement(Grid.Row, {\n    centered: true,\n    columns: 3,\n    divided: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    textAlign: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, weathericon(f[0].wicon)), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, f[0].temp), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, f[0].day)), React.createElement(Grid.Column, {\n    textAlign: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, weathericon(f[1].wicon)), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, f[1].temp), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, f[1].day)), React.createElement(Grid.Column, {\n    textAlign: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, weathericon(f[2].wicon)), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, f[2].temp), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, f[2].day))));\n};\n\nexport default Weather;","map":{"version":3,"sources":["/home/bob/code/gpothier/frontend/src/components/Weather/Weather.jsx"],"names":["React","Header","Grid","Image","Dimmer","Loader","Weather","props","data","news","length","city_name","temp","wicon","day","forecast","f","count","Object","entries","map","item","key","ico","weathericon","icon","undefined","images","require","context","weatherimage","image","background","margin"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Header, Grid, Image, Dimmer, Loader } from \"semantic-ui-react\";\nimport \"./Weather.css\";\n\nconst Weather = props => {\n  {\n    /* If props data is empty/null, return a loading spinner */\n  }\n  if (props.data.news[7].data.length === 0) {\n    return (\n      <div>\n        <Dimmer active inverted>\n          <Loader active inline=\"centered\" size=\"mini\" inverted></Loader>\n        </Dimmer>\n      </div>\n    );\n  }\n\n  {\n    /* Set the weather variables to be used */\n  }\n  var data = props.data.news[7].data[0].data[0];\n  const city_name = data[\"city_name\"];\n  let temp = data[\"temp\"];\n  let wicon = data[\"ico\"];\n  let day = data[\"day\"];\n\n  const forecast = props.data.news[6].data[0].data;\n  let f = [];\n  let count = 0;\n\n  {\n    /* Map over forecast data and save to f array */\n  }\n  Object.entries(forecast).map((item, key) => {\n    f[count] = {\n      day: item[1].day,\n      temp: item[1].temp,\n      wicon: item[1].ico\n    };\n    count++;\n    return f;\n  });\n\n  {\n    /* Set up the weather icons to use */\n  }\n  const weathericon = icon => {\n    if (icon !== undefined && icon !== \"\") {\n      const temp = icon;\n      const images = require.context(\"../../assets/icons\", true);\n      const weatherimage = images(\"./\" + temp + \".svg\");\n      const image = (\n        <Image\n          src={weatherimage}\n          alt={\"Current Conditions\"}\n          size=\"tiny\"\n          centered\n        />\n      );\n      return image;\n    }\n  };\n\n  return (\n    <Grid centered columns={1} style={{ background: \"WhiteSmoke\" }}>\n      <Grid.Row centered>\n        <Grid.Column textAlign=\"left\">\n          <Header size=\"small\" style={{ margin: \"0\" }}>\n            {city_name}\n          </Header>\n          <div>{day}</div>\n        </Grid.Column>\n        <Grid.Column textAlign=\"center\">\n          <div>{weathericon(wicon)}</div>\n          <div className=\"weather-icon\">{temp}</div>\n        </Grid.Column>\n      </Grid.Row>\n\n      <Grid.Row centered columns={3} divided>\n        <Grid.Column textAlign=\"center\">\n          <div>{weathericon(f[0].wicon)}</div>\n          <div>{f[0].temp}</div>\n          <div>{f[0].day}</div>\n        </Grid.Column>\n        <Grid.Column textAlign=\"center\">\n          <div>{weathericon(f[1].wicon)}</div>\n          <div>{f[1].temp}</div>\n          <div>{f[1].day}</div>\n        </Grid.Column>\n        <Grid.Column textAlign=\"center\">\n          <div>{weathericon(f[2].wicon)}</div>\n          <div>{f[2].temp}</div>\n          <div>{f[2].day}</div>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  );\n};\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}