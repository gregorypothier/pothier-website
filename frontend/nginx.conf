#umber of processes to run
worker_processes auto;

#Provides the configuration file context in which the directives that affect connection processing are specified.
events {
    # Sets the maximum number of simultaneous connections that can be opened by a worker process.
    worker_connections 8000;
    # Tells the worker to accept multiple connections at a time
    multi_accept on;
}


http {
    # what times to include
    include       /etc/nginx/mime.types;
    # what is the default one
    default_type  application/octet-stream;

    # Sets the path, format, and configuration for a buffered log write
    log_format compression '$remote_addr - $remote_user [$time_local] '
        '"$request" $status $upstream_addr '
        '"$http_referer" "$http_user_agent"';

    server {
        # listen on port 80
        listen 80;
        listen [::]:80;
        server_name  pothier.io;

        # save logs here
        access_log /var/log/nginx/access.log compression;

        # where the root here
        root /var/www/certbot;
        # what file to server as index
        index index.html index.htm;

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            # First attempt to serve request as file, then
            # as directory, then fall back to redirecting to index.html
            return 301 https://$host$request_uri;
            
        }
        

    }

    server {
        # listen on port 443
        listen 443 ssl;
        server_name pothier.io;

        server_tokens off;
        keepalive_timeout   75;

        add_header          Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header          X-Content-Type-Options nosniff;
        add_header          X-Frame-Options SAMEORIGIN;
        add_header          X-XSS-Protection "1; mode=block";

        ssl_certificate /etc/letsencrypt/live/pothier.io/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/pothier.io/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
        ssl_protocols TLSv1.1 TLSv1.2;

        #ssl_prefer_server_ciphers on;
        #ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK';

        # save logs here
        access_log /var/log/nginx/access.log compression;
        error_log /var/log/nginx/error.log;

        # where the root here
        root /var/www;
        
        # what file to server as index
        index index.html index.htm;

        
        location / {
            # First attempt to serve request as file, then
            # as directory, then fall back to redirecting to index.html
            try_files $uri $uri/ /index.html;
            
        }
        location /api/ {
           proxy_pass http://middleware:5000/api/;
        }

        # Media: images, icons, video, audio, HTC
        location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
          expires 1M;
          access_log off;
          add_header Cache-Control "public";
        }

        # Javascript and CSS files
        location ~* \.(?:css|js)$ {
            try_files $uri =404;
            expires 1y;
            access_log off;
            add_header Cache-Control "public";
        }

        # Any route containing a file extension (e.g. /devicesfile.js)
        location ~ ^.+\..+$ {
            try_files $uri =404;
        }
    }
}
